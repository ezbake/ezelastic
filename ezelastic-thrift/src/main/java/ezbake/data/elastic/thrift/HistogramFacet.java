/*   Copyright (C) 2013-2014 Computer Sciences Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. */

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ezbake.data.elastic.thrift;

import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class HistogramFacet implements org.apache.thrift.TBase<HistogramFacet, HistogramFacet._Fields>, java.io.Serializable, Cloneable, Comparable<HistogramFacet> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HistogramFacet");

  private static final org.apache.thrift.protocol.TField INTERVAL_FIELD_DESC = new org.apache.thrift.protocol.TField("interval", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField FACET_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("facetValue", org.apache.thrift.protocol.TType.STRUCT, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new HistogramFacetStandardSchemeFactory());
    schemes.put(TupleScheme.class, new HistogramFacetTupleSchemeFactory());
  }

  public int interval; // required
  public BaseFacetValue facetValue; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    INTERVAL((short)1, "interval"),
    FACET_VALUE((short)2, "facetValue");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // INTERVAL
          return INTERVAL;
        case 2: // FACET_VALUE
          return FACET_VALUE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __INTERVAL_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.INTERVAL, new org.apache.thrift.meta_data.FieldMetaData("interval", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FACET_VALUE, new org.apache.thrift.meta_data.FieldMetaData("facetValue", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BaseFacetValue.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HistogramFacet.class, metaDataMap);
  }

  public HistogramFacet() {
  }

  public HistogramFacet(
    int interval,
    BaseFacetValue facetValue)
  {
    this();
    this.interval = interval;
    setIntervalIsSet(true);
    this.facetValue = facetValue;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HistogramFacet(HistogramFacet other) {
    __isset_bitfield = other.__isset_bitfield;
    this.interval = other.interval;
    if (other.isSetFacetValue()) {
      this.facetValue = new BaseFacetValue(other.facetValue);
    }
  }

  public HistogramFacet deepCopy() {
    return new HistogramFacet(this);
  }

  @Override
  public void clear() {
    setIntervalIsSet(false);
    this.interval = 0;
    this.facetValue = null;
  }

  public int getInterval() {
    return this.interval;
  }

  public HistogramFacet setInterval(int interval) {
    this.interval = interval;
    setIntervalIsSet(true);
    return this;
  }

  public void unsetInterval() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INTERVAL_ISSET_ID);
  }

  /** Returns true if field interval is set (has been assigned a value) and false otherwise */
  public boolean isSetInterval() {
    return EncodingUtils.testBit(__isset_bitfield, __INTERVAL_ISSET_ID);
  }

  public void setIntervalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INTERVAL_ISSET_ID, value);
  }

  public BaseFacetValue getFacetValue() {
    return this.facetValue;
  }

  public HistogramFacet setFacetValue(BaseFacetValue facetValue) {
    this.facetValue = facetValue;
    return this;
  }

  public void unsetFacetValue() {
    this.facetValue = null;
  }

  /** Returns true if field facetValue is set (has been assigned a value) and false otherwise */
  public boolean isSetFacetValue() {
    return this.facetValue != null;
  }

  public void setFacetValueIsSet(boolean value) {
    if (!value) {
      this.facetValue = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case INTERVAL:
      if (value == null) {
        unsetInterval();
      } else {
        setInterval((Integer)value);
      }
      break;

    case FACET_VALUE:
      if (value == null) {
        unsetFacetValue();
      } else {
        setFacetValue((BaseFacetValue)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case INTERVAL:
      return Integer.valueOf(getInterval());

    case FACET_VALUE:
      return getFacetValue();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case INTERVAL:
      return isSetInterval();
    case FACET_VALUE:
      return isSetFacetValue();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof HistogramFacet)
      return this.equals((HistogramFacet)that);
    return false;
  }

  public boolean equals(HistogramFacet that) {
    if (that == null)
      return false;

    boolean this_present_interval = true;
    boolean that_present_interval = true;
    if (this_present_interval || that_present_interval) {
      if (!(this_present_interval && that_present_interval))
        return false;
      if (this.interval != that.interval)
        return false;
    }

    boolean this_present_facetValue = true && this.isSetFacetValue();
    boolean that_present_facetValue = true && that.isSetFacetValue();
    if (this_present_facetValue || that_present_facetValue) {
      if (!(this_present_facetValue && that_present_facetValue))
        return false;
      if (!this.facetValue.equals(that.facetValue))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_interval = true;
    builder.append(present_interval);
    if (present_interval)
      builder.append(interval);

    boolean present_facetValue = true && (isSetFacetValue());
    builder.append(present_facetValue);
    if (present_facetValue)
      builder.append(facetValue);

    return builder.toHashCode();
  }

  @Override
  public int compareTo(HistogramFacet other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetInterval()).compareTo(other.isSetInterval());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInterval()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.interval, other.interval);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFacetValue()).compareTo(other.isSetFacetValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFacetValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.facetValue, other.facetValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("HistogramFacet(");
    boolean first = true;

    sb.append("interval:");
    sb.append(this.interval);
    first = false;
    if (!first) sb.append(", ");
    sb.append("facetValue:");
    if (this.facetValue == null) {
      sb.append("null");
    } else {
      sb.append(this.facetValue);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'interval' because it's a primitive and you chose the non-beans generator.
    if (facetValue == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'facetValue' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HistogramFacetStandardSchemeFactory implements SchemeFactory {
    public HistogramFacetStandardScheme getScheme() {
      return new HistogramFacetStandardScheme();
    }
  }

  private static class HistogramFacetStandardScheme extends StandardScheme<HistogramFacet> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, HistogramFacet struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // INTERVAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.interval = iprot.readI32();
              struct.setIntervalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FACET_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.facetValue = new BaseFacetValue();
              struct.facetValue.read(iprot);
              struct.setFacetValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetInterval()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'interval' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, HistogramFacet struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(INTERVAL_FIELD_DESC);
      oprot.writeI32(struct.interval);
      oprot.writeFieldEnd();
      if (struct.facetValue != null) {
        oprot.writeFieldBegin(FACET_VALUE_FIELD_DESC);
        struct.facetValue.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HistogramFacetTupleSchemeFactory implements SchemeFactory {
    public HistogramFacetTupleScheme getScheme() {
      return new HistogramFacetTupleScheme();
    }
  }

  private static class HistogramFacetTupleScheme extends TupleScheme<HistogramFacet> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, HistogramFacet struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.interval);
      struct.facetValue.write(oprot);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, HistogramFacet struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.interval = iprot.readI32();
      struct.setIntervalIsSet(true);
      struct.facetValue = new BaseFacetValue();
      struct.facetValue.read(iprot);
      struct.setFacetValueIsSet(true);
    }
  }

}

