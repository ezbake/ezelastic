/*   Copyright (C) 2013-2014 Computer Sciences Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. */

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ezbake.data.elastic.thrift;

import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Exception thrown when requested field(s) could not be found in the document
 */
public class FieldsNotFound extends TException implements org.apache.thrift.TBase<FieldsNotFound, FieldsNotFound._Fields>, java.io.Serializable, Cloneable, Comparable<FieldsNotFound> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FieldsNotFound");

  private static final org.apache.thrift.protocol.TField _ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField _TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("_type", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField FIELDS_FIELD_DESC = new org.apache.thrift.protocol.TField("fields", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("message", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new FieldsNotFoundStandardSchemeFactory());
    schemes.put(TupleScheme.class, new FieldsNotFoundTupleSchemeFactory());
  }

  /**
   * Elastic ID for document for which field(s) were missing
   */
  public String _id; // required
  /**
   * Elastic type field for document for which field(s) were missing
   */
  public String _type; // required
  /**
   * The field(s)s that were missing
   */
  public List<String> fields; // required
  /**
   * Message giving context to why and where error occurred
   */
  public String message; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * Elastic ID for document for which field(s) were missing
     */
    _ID((short)1, "_id"),
    /**
     * Elastic type field for document for which field(s) were missing
     */
    _TYPE((short)2, "_type"),
    /**
     * The field(s)s that were missing
     */
    FIELDS((short)3, "fields"),
    /**
     * Message giving context to why and where error occurred
     */
    MESSAGE((short)4, "message");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // _ID
          return _ID;
        case 2: // _TYPE
          return _TYPE;
        case 3: // FIELDS
          return FIELDS;
        case 4: // MESSAGE
          return MESSAGE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.MESSAGE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields._ID, new org.apache.thrift.meta_data.FieldMetaData("_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields._TYPE, new org.apache.thrift.meta_data.FieldMetaData("_type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FIELDS, new org.apache.thrift.meta_data.FieldMetaData("fields", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("message", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FieldsNotFound.class, metaDataMap);
  }

  public FieldsNotFound() {
  }

  public FieldsNotFound(
    String _id,
    String _type,
    List<String> fields)
  {
    this();
    this._id = _id;
    this._type = _type;
    this.fields = fields;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FieldsNotFound(FieldsNotFound other) {
    if (other.isSet_id()) {
      this._id = other._id;
    }
    if (other.isSet_type()) {
      this._type = other._type;
    }
    if (other.isSetFields()) {
      List<String> __this__fields = new ArrayList<String>(other.fields);
      this.fields = __this__fields;
    }
    if (other.isSetMessage()) {
      this.message = other.message;
    }
  }

  public FieldsNotFound deepCopy() {
    return new FieldsNotFound(this);
  }

  @Override
  public void clear() {
    this._id = null;
    this._type = null;
    this.fields = null;
    this.message = null;
  }

  /**
   * Elastic ID for document for which field(s) were missing
   */
  public String get_id() {
    return this._id;
  }

  /**
   * Elastic ID for document for which field(s) were missing
   */
  public FieldsNotFound set_id(String _id) {
    this._id = _id;
    return this;
  }

  public void unset_id() {
    this._id = null;
  }

  /** Returns true if field _id is set (has been assigned a value) and false otherwise */
  public boolean isSet_id() {
    return this._id != null;
  }

  public void set_idIsSet(boolean value) {
    if (!value) {
      this._id = null;
    }
  }

  /**
   * Elastic type field for document for which field(s) were missing
   */
  public String get_type() {
    return this._type;
  }

  /**
   * Elastic type field for document for which field(s) were missing
   */
  public FieldsNotFound set_type(String _type) {
    this._type = _type;
    return this;
  }

  public void unset_type() {
    this._type = null;
  }

  /** Returns true if field _type is set (has been assigned a value) and false otherwise */
  public boolean isSet_type() {
    return this._type != null;
  }

  public void set_typeIsSet(boolean value) {
    if (!value) {
      this._type = null;
    }
  }

  public int getFieldsSize() {
    return (this.fields == null) ? 0 : this.fields.size();
  }

  public java.util.Iterator<String> getFieldsIterator() {
    return (this.fields == null) ? null : this.fields.iterator();
  }

  public void addToFields(String elem) {
    if (this.fields == null) {
      this.fields = new ArrayList<String>();
    }
    this.fields.add(elem);
  }

  /**
   * The field(s)s that were missing
   */
  public List<String> getFields() {
    return this.fields;
  }

  /**
   * The field(s)s that were missing
   */
  public FieldsNotFound setFields(List<String> fields) {
    this.fields = fields;
    return this;
  }

  public void unsetFields() {
    this.fields = null;
  }

  /** Returns true if field fields is set (has been assigned a value) and false otherwise */
  public boolean isSetFields() {
    return this.fields != null;
  }

  public void setFieldsIsSet(boolean value) {
    if (!value) {
      this.fields = null;
    }
  }

  /**
   * Message giving context to why and where error occurred
   */
  public String getMessage() {
    return this.message;
  }

  /**
   * Message giving context to why and where error occurred
   */
  public FieldsNotFound setMessage(String message) {
    this.message = message;
    return this;
  }

  public void unsetMessage() {
    this.message = null;
  }

  /** Returns true if field message is set (has been assigned a value) and false otherwise */
  public boolean isSetMessage() {
    return this.message != null;
  }

  public void setMessageIsSet(boolean value) {
    if (!value) {
      this.message = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case _ID:
      if (value == null) {
        unset_id();
      } else {
        set_id((String)value);
      }
      break;

    case _TYPE:
      if (value == null) {
        unset_type();
      } else {
        set_type((String)value);
      }
      break;

    case FIELDS:
      if (value == null) {
        unsetFields();
      } else {
        setFields((List<String>)value);
      }
      break;

    case MESSAGE:
      if (value == null) {
        unsetMessage();
      } else {
        setMessage((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case _ID:
      return get_id();

    case _TYPE:
      return get_type();

    case FIELDS:
      return getFields();

    case MESSAGE:
      return getMessage();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case _ID:
      return isSet_id();
    case _TYPE:
      return isSet_type();
    case FIELDS:
      return isSetFields();
    case MESSAGE:
      return isSetMessage();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FieldsNotFound)
      return this.equals((FieldsNotFound)that);
    return false;
  }

  public boolean equals(FieldsNotFound that) {
    if (that == null)
      return false;

    boolean this_present__id = true && this.isSet_id();
    boolean that_present__id = true && that.isSet_id();
    if (this_present__id || that_present__id) {
      if (!(this_present__id && that_present__id))
        return false;
      if (!this._id.equals(that._id))
        return false;
    }

    boolean this_present__type = true && this.isSet_type();
    boolean that_present__type = true && that.isSet_type();
    if (this_present__type || that_present__type) {
      if (!(this_present__type && that_present__type))
        return false;
      if (!this._type.equals(that._type))
        return false;
    }

    boolean this_present_fields = true && this.isSetFields();
    boolean that_present_fields = true && that.isSetFields();
    if (this_present_fields || that_present_fields) {
      if (!(this_present_fields && that_present_fields))
        return false;
      if (!this.fields.equals(that.fields))
        return false;
    }

    boolean this_present_message = true && this.isSetMessage();
    boolean that_present_message = true && that.isSetMessage();
    if (this_present_message || that_present_message) {
      if (!(this_present_message && that_present_message))
        return false;
      if (!this.message.equals(that.message))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present__id = true && (isSet_id());
    builder.append(present__id);
    if (present__id)
      builder.append(_id);

    boolean present__type = true && (isSet_type());
    builder.append(present__type);
    if (present__type)
      builder.append(_type);

    boolean present_fields = true && (isSetFields());
    builder.append(present_fields);
    if (present_fields)
      builder.append(fields);

    boolean present_message = true && (isSetMessage());
    builder.append(present_message);
    if (present_message)
      builder.append(message);

    return builder.toHashCode();
  }

  @Override
  public int compareTo(FieldsNotFound other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSet_id()).compareTo(other.isSet_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._id, other._id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSet_type()).compareTo(other.isSet_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._type, other._type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFields()).compareTo(other.isSetFields());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFields()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fields, other.fields);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMessage()).compareTo(other.isSetMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.message, other.message);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FieldsNotFound(");
    boolean first = true;

    sb.append("_id:");
    if (this._id == null) {
      sb.append("null");
    } else {
      sb.append(this._id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("_type:");
    if (this._type == null) {
      sb.append("null");
    } else {
      sb.append(this._type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fields:");
    if (this.fields == null) {
      sb.append("null");
    } else {
      sb.append(this.fields);
    }
    first = false;
    if (isSetMessage()) {
      if (!first) sb.append(", ");
      sb.append("message:");
      if (this.message == null) {
        sb.append("null");
      } else {
        sb.append(this.message);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (_id == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_id' was not present! Struct: " + toString());
    }
    if (_type == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_type' was not present! Struct: " + toString());
    }
    if (fields == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'fields' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FieldsNotFoundStandardSchemeFactory implements SchemeFactory {
    public FieldsNotFoundStandardScheme getScheme() {
      return new FieldsNotFoundStandardScheme();
    }
  }

  private static class FieldsNotFoundStandardScheme extends StandardScheme<FieldsNotFound> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FieldsNotFound struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // _ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct._id = iprot.readString();
              struct.set_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // _TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct._type = iprot.readString();
              struct.set_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FIELDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list120 = iprot.readListBegin();
                struct.fields = new ArrayList<String>(_list120.size);
                for (int _i121 = 0; _i121 < _list120.size; ++_i121)
                {
                  String _elem122;
                  _elem122 = iprot.readString();
                  struct.fields.add(_elem122);
                }
                iprot.readListEnd();
              }
              struct.setFieldsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.message = iprot.readString();
              struct.setMessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FieldsNotFound struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct._id != null) {
        oprot.writeFieldBegin(_ID_FIELD_DESC);
        oprot.writeString(struct._id);
        oprot.writeFieldEnd();
      }
      if (struct._type != null) {
        oprot.writeFieldBegin(_TYPE_FIELD_DESC);
        oprot.writeString(struct._type);
        oprot.writeFieldEnd();
      }
      if (struct.fields != null) {
        oprot.writeFieldBegin(FIELDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.fields.size()));
          for (String _iter123 : struct.fields)
          {
            oprot.writeString(_iter123);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.message != null) {
        if (struct.isSetMessage()) {
          oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
          oprot.writeString(struct.message);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FieldsNotFoundTupleSchemeFactory implements SchemeFactory {
    public FieldsNotFoundTupleScheme getScheme() {
      return new FieldsNotFoundTupleScheme();
    }
  }

  private static class FieldsNotFoundTupleScheme extends TupleScheme<FieldsNotFound> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FieldsNotFound struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct._id);
      oprot.writeString(struct._type);
      {
        oprot.writeI32(struct.fields.size());
        for (String _iter124 : struct.fields)
        {
          oprot.writeString(_iter124);
        }
      }
      BitSet optionals = new BitSet();
      if (struct.isSetMessage()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetMessage()) {
        oprot.writeString(struct.message);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FieldsNotFound struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct._id = iprot.readString();
      struct.set_idIsSet(true);
      struct._type = iprot.readString();
      struct.set_typeIsSet(true);
      {
        org.apache.thrift.protocol.TList _list125 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.fields = new ArrayList<String>(_list125.size);
        for (int _i126 = 0; _i126 < _list125.size; ++_i126)
        {
          String _elem127;
          _elem127 = iprot.readString();
          struct.fields.add(_elem127);
        }
      }
      struct.setFieldsIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.message = iprot.readString();
        struct.setMessageIsSet(true);
      }
    }
  }

}

