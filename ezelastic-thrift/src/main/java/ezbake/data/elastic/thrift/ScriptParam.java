/*   Copyright (C) 2013-2014 Computer Sciences Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. */

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ezbake.data.elastic.thrift;

import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ScriptParam implements org.apache.thrift.TBase<ScriptParam, ScriptParam._Fields>, java.io.Serializable, Cloneable, Comparable<ScriptParam> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ScriptParam");

  private static final org.apache.thrift.protocol.TField PARAM_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("paramName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PARAM_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("paramValue", org.apache.thrift.protocol.TType.STRUCT, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ScriptParamStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ScriptParamTupleSchemeFactory());
  }

  public String paramName; // required
  public ScriptValue paramValue; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PARAM_NAME((short)1, "paramName"),
    PARAM_VALUE((short)2, "paramValue");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PARAM_NAME
          return PARAM_NAME;
        case 2: // PARAM_VALUE
          return PARAM_VALUE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PARAM_NAME, new org.apache.thrift.meta_data.FieldMetaData("paramName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARAM_VALUE, new org.apache.thrift.meta_data.FieldMetaData("paramValue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ScriptValue.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ScriptParam.class, metaDataMap);
  }

  public ScriptParam() {
  }

  public ScriptParam(
    String paramName,
    ScriptValue paramValue)
  {
    this();
    this.paramName = paramName;
    this.paramValue = paramValue;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ScriptParam(ScriptParam other) {
    if (other.isSetParamName()) {
      this.paramName = other.paramName;
    }
    if (other.isSetParamValue()) {
      this.paramValue = new ScriptValue(other.paramValue);
    }
  }

  public ScriptParam deepCopy() {
    return new ScriptParam(this);
  }

  @Override
  public void clear() {
    this.paramName = null;
    this.paramValue = null;
  }

  public String getParamName() {
    return this.paramName;
  }

  public ScriptParam setParamName(String paramName) {
    this.paramName = paramName;
    return this;
  }

  public void unsetParamName() {
    this.paramName = null;
  }

  /** Returns true if field paramName is set (has been assigned a value) and false otherwise */
  public boolean isSetParamName() {
    return this.paramName != null;
  }

  public void setParamNameIsSet(boolean value) {
    if (!value) {
      this.paramName = null;
    }
  }

  public ScriptValue getParamValue() {
    return this.paramValue;
  }

  public ScriptParam setParamValue(ScriptValue paramValue) {
    this.paramValue = paramValue;
    return this;
  }

  public void unsetParamValue() {
    this.paramValue = null;
  }

  /** Returns true if field paramValue is set (has been assigned a value) and false otherwise */
  public boolean isSetParamValue() {
    return this.paramValue != null;
  }

  public void setParamValueIsSet(boolean value) {
    if (!value) {
      this.paramValue = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PARAM_NAME:
      if (value == null) {
        unsetParamName();
      } else {
        setParamName((String)value);
      }
      break;

    case PARAM_VALUE:
      if (value == null) {
        unsetParamValue();
      } else {
        setParamValue((ScriptValue)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PARAM_NAME:
      return getParamName();

    case PARAM_VALUE:
      return getParamValue();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PARAM_NAME:
      return isSetParamName();
    case PARAM_VALUE:
      return isSetParamValue();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ScriptParam)
      return this.equals((ScriptParam)that);
    return false;
  }

  public boolean equals(ScriptParam that) {
    if (that == null)
      return false;

    boolean this_present_paramName = true && this.isSetParamName();
    boolean that_present_paramName = true && that.isSetParamName();
    if (this_present_paramName || that_present_paramName) {
      if (!(this_present_paramName && that_present_paramName))
        return false;
      if (!this.paramName.equals(that.paramName))
        return false;
    }

    boolean this_present_paramValue = true && this.isSetParamValue();
    boolean that_present_paramValue = true && that.isSetParamValue();
    if (this_present_paramValue || that_present_paramValue) {
      if (!(this_present_paramValue && that_present_paramValue))
        return false;
      if (!this.paramValue.equals(that.paramValue))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_paramName = true && (isSetParamName());
    builder.append(present_paramName);
    if (present_paramName)
      builder.append(paramName);

    boolean present_paramValue = true && (isSetParamValue());
    builder.append(present_paramValue);
    if (present_paramValue)
      builder.append(paramValue);

    return builder.toHashCode();
  }

  @Override
  public int compareTo(ScriptParam other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetParamName()).compareTo(other.isSetParamName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParamName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paramName, other.paramName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParamValue()).compareTo(other.isSetParamValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParamValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paramValue, other.paramValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ScriptParam(");
    boolean first = true;

    sb.append("paramName:");
    if (this.paramName == null) {
      sb.append("null");
    } else {
      sb.append(this.paramName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("paramValue:");
    if (this.paramValue == null) {
      sb.append("null");
    } else {
      sb.append(this.paramValue);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ScriptParamStandardSchemeFactory implements SchemeFactory {
    public ScriptParamStandardScheme getScheme() {
      return new ScriptParamStandardScheme();
    }
  }

  private static class ScriptParamStandardScheme extends StandardScheme<ScriptParam> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ScriptParam struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PARAM_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.paramName = iprot.readString();
              struct.setParamNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PARAM_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.paramValue = new ScriptValue();
              struct.paramValue.read(iprot);
              struct.setParamValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ScriptParam struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.paramName != null) {
        oprot.writeFieldBegin(PARAM_NAME_FIELD_DESC);
        oprot.writeString(struct.paramName);
        oprot.writeFieldEnd();
      }
      if (struct.paramValue != null) {
        oprot.writeFieldBegin(PARAM_VALUE_FIELD_DESC);
        struct.paramValue.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ScriptParamTupleSchemeFactory implements SchemeFactory {
    public ScriptParamTupleScheme getScheme() {
      return new ScriptParamTupleScheme();
    }
  }

  private static class ScriptParamTupleScheme extends TupleScheme<ScriptParam> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ScriptParam struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetParamName()) {
        optionals.set(0);
      }
      if (struct.isSetParamValue()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetParamName()) {
        oprot.writeString(struct.paramName);
      }
      if (struct.isSetParamValue()) {
        struct.paramValue.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ScriptParam struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.paramName = iprot.readString();
        struct.setParamNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.paramValue = new ScriptValue();
        struct.paramValue.read(iprot);
        struct.setParamValueIsSet(true);
      }
    }
  }

}

