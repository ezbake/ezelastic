/*   Copyright (C) 2013-2014 Computer Sciences Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. */

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ezbake.data.elastic.thrift;

import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class KeyValueDateScript implements org.apache.thrift.TBase<KeyValueDateScript, KeyValueDateScript._Fields>, java.io.Serializable, Cloneable, Comparable<KeyValueDateScript> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("KeyValueDateScript");

  private static final org.apache.thrift.protocol.TField KEY_FIELD_FIELD_DESC = new org.apache.thrift.protocol.TField("key_field", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField VALUE_SCRIPT_FIELD_DESC = new org.apache.thrift.protocol.TField("value_script", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SCRIPT_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("scriptParams", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new KeyValueDateScriptStandardSchemeFactory());
    schemes.put(TupleScheme.class, new KeyValueDateScriptTupleSchemeFactory());
  }

  public String key_field; // required
  public String value_script; // required
  public List<ScriptParam> scriptParams; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    KEY_FIELD((short)1, "key_field"),
    VALUE_SCRIPT((short)2, "value_script"),
    SCRIPT_PARAMS((short)3, "scriptParams");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // KEY_FIELD
          return KEY_FIELD;
        case 2: // VALUE_SCRIPT
          return VALUE_SCRIPT;
        case 3: // SCRIPT_PARAMS
          return SCRIPT_PARAMS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.SCRIPT_PARAMS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.KEY_FIELD, new org.apache.thrift.meta_data.FieldMetaData("key_field", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VALUE_SCRIPT, new org.apache.thrift.meta_data.FieldMetaData("value_script", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SCRIPT_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("scriptParams", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ScriptParam.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(KeyValueDateScript.class, metaDataMap);
  }

  public KeyValueDateScript() {
  }

  public KeyValueDateScript(
    String key_field,
    String value_script)
  {
    this();
    this.key_field = key_field;
    this.value_script = value_script;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public KeyValueDateScript(KeyValueDateScript other) {
    if (other.isSetKey_field()) {
      this.key_field = other.key_field;
    }
    if (other.isSetValue_script()) {
      this.value_script = other.value_script;
    }
    if (other.isSetScriptParams()) {
      List<ScriptParam> __this__scriptParams = new ArrayList<ScriptParam>(other.scriptParams.size());
      for (ScriptParam other_element : other.scriptParams) {
        __this__scriptParams.add(new ScriptParam(other_element));
      }
      this.scriptParams = __this__scriptParams;
    }
  }

  public KeyValueDateScript deepCopy() {
    return new KeyValueDateScript(this);
  }

  @Override
  public void clear() {
    this.key_field = null;
    this.value_script = null;
    this.scriptParams = null;
  }

  public String getKey_field() {
    return this.key_field;
  }

  public KeyValueDateScript setKey_field(String key_field) {
    this.key_field = key_field;
    return this;
  }

  public void unsetKey_field() {
    this.key_field = null;
  }

  /** Returns true if field key_field is set (has been assigned a value) and false otherwise */
  public boolean isSetKey_field() {
    return this.key_field != null;
  }

  public void setKey_fieldIsSet(boolean value) {
    if (!value) {
      this.key_field = null;
    }
  }

  public String getValue_script() {
    return this.value_script;
  }

  public KeyValueDateScript setValue_script(String value_script) {
    this.value_script = value_script;
    return this;
  }

  public void unsetValue_script() {
    this.value_script = null;
  }

  /** Returns true if field value_script is set (has been assigned a value) and false otherwise */
  public boolean isSetValue_script() {
    return this.value_script != null;
  }

  public void setValue_scriptIsSet(boolean value) {
    if (!value) {
      this.value_script = null;
    }
  }

  public int getScriptParamsSize() {
    return (this.scriptParams == null) ? 0 : this.scriptParams.size();
  }

  public java.util.Iterator<ScriptParam> getScriptParamsIterator() {
    return (this.scriptParams == null) ? null : this.scriptParams.iterator();
  }

  public void addToScriptParams(ScriptParam elem) {
    if (this.scriptParams == null) {
      this.scriptParams = new ArrayList<ScriptParam>();
    }
    this.scriptParams.add(elem);
  }

  public List<ScriptParam> getScriptParams() {
    return this.scriptParams;
  }

  public KeyValueDateScript setScriptParams(List<ScriptParam> scriptParams) {
    this.scriptParams = scriptParams;
    return this;
  }

  public void unsetScriptParams() {
    this.scriptParams = null;
  }

  /** Returns true if field scriptParams is set (has been assigned a value) and false otherwise */
  public boolean isSetScriptParams() {
    return this.scriptParams != null;
  }

  public void setScriptParamsIsSet(boolean value) {
    if (!value) {
      this.scriptParams = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case KEY_FIELD:
      if (value == null) {
        unsetKey_field();
      } else {
        setKey_field((String)value);
      }
      break;

    case VALUE_SCRIPT:
      if (value == null) {
        unsetValue_script();
      } else {
        setValue_script((String)value);
      }
      break;

    case SCRIPT_PARAMS:
      if (value == null) {
        unsetScriptParams();
      } else {
        setScriptParams((List<ScriptParam>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case KEY_FIELD:
      return getKey_field();

    case VALUE_SCRIPT:
      return getValue_script();

    case SCRIPT_PARAMS:
      return getScriptParams();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case KEY_FIELD:
      return isSetKey_field();
    case VALUE_SCRIPT:
      return isSetValue_script();
    case SCRIPT_PARAMS:
      return isSetScriptParams();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof KeyValueDateScript)
      return this.equals((KeyValueDateScript)that);
    return false;
  }

  public boolean equals(KeyValueDateScript that) {
    if (that == null)
      return false;

    boolean this_present_key_field = true && this.isSetKey_field();
    boolean that_present_key_field = true && that.isSetKey_field();
    if (this_present_key_field || that_present_key_field) {
      if (!(this_present_key_field && that_present_key_field))
        return false;
      if (!this.key_field.equals(that.key_field))
        return false;
    }

    boolean this_present_value_script = true && this.isSetValue_script();
    boolean that_present_value_script = true && that.isSetValue_script();
    if (this_present_value_script || that_present_value_script) {
      if (!(this_present_value_script && that_present_value_script))
        return false;
      if (!this.value_script.equals(that.value_script))
        return false;
    }

    boolean this_present_scriptParams = true && this.isSetScriptParams();
    boolean that_present_scriptParams = true && that.isSetScriptParams();
    if (this_present_scriptParams || that_present_scriptParams) {
      if (!(this_present_scriptParams && that_present_scriptParams))
        return false;
      if (!this.scriptParams.equals(that.scriptParams))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_key_field = true && (isSetKey_field());
    builder.append(present_key_field);
    if (present_key_field)
      builder.append(key_field);

    boolean present_value_script = true && (isSetValue_script());
    builder.append(present_value_script);
    if (present_value_script)
      builder.append(value_script);

    boolean present_scriptParams = true && (isSetScriptParams());
    builder.append(present_scriptParams);
    if (present_scriptParams)
      builder.append(scriptParams);

    return builder.toHashCode();
  }

  @Override
  public int compareTo(KeyValueDateScript other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetKey_field()).compareTo(other.isSetKey_field());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKey_field()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key_field, other.key_field);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetValue_script()).compareTo(other.isSetValue_script());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValue_script()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value_script, other.value_script);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetScriptParams()).compareTo(other.isSetScriptParams());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScriptParams()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scriptParams, other.scriptParams);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("KeyValueDateScript(");
    boolean first = true;

    sb.append("key_field:");
    if (this.key_field == null) {
      sb.append("null");
    } else {
      sb.append(this.key_field);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("value_script:");
    if (this.value_script == null) {
      sb.append("null");
    } else {
      sb.append(this.value_script);
    }
    first = false;
    if (isSetScriptParams()) {
      if (!first) sb.append(", ");
      sb.append("scriptParams:");
      if (this.scriptParams == null) {
        sb.append("null");
      } else {
        sb.append(this.scriptParams);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (key_field == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'key_field' was not present! Struct: " + toString());
    }
    if (value_script == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'value_script' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class KeyValueDateScriptStandardSchemeFactory implements SchemeFactory {
    public KeyValueDateScriptStandardScheme getScheme() {
      return new KeyValueDateScriptStandardScheme();
    }
  }

  private static class KeyValueDateScriptStandardScheme extends StandardScheme<KeyValueDateScript> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, KeyValueDateScript struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // KEY_FIELD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.key_field = iprot.readString();
              struct.setKey_fieldIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // VALUE_SCRIPT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.value_script = iprot.readString();
              struct.setValue_scriptIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SCRIPT_PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                struct.scriptParams = new ArrayList<ScriptParam>(_list24.size);
                for (int _i25 = 0; _i25 < _list24.size; ++_i25)
                {
                  ScriptParam _elem26;
                  _elem26 = new ScriptParam();
                  _elem26.read(iprot);
                  struct.scriptParams.add(_elem26);
                }
                iprot.readListEnd();
              }
              struct.setScriptParamsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, KeyValueDateScript struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.key_field != null) {
        oprot.writeFieldBegin(KEY_FIELD_FIELD_DESC);
        oprot.writeString(struct.key_field);
        oprot.writeFieldEnd();
      }
      if (struct.value_script != null) {
        oprot.writeFieldBegin(VALUE_SCRIPT_FIELD_DESC);
        oprot.writeString(struct.value_script);
        oprot.writeFieldEnd();
      }
      if (struct.scriptParams != null) {
        if (struct.isSetScriptParams()) {
          oprot.writeFieldBegin(SCRIPT_PARAMS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.scriptParams.size()));
            for (ScriptParam _iter27 : struct.scriptParams)
            {
              _iter27.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class KeyValueDateScriptTupleSchemeFactory implements SchemeFactory {
    public KeyValueDateScriptTupleScheme getScheme() {
      return new KeyValueDateScriptTupleScheme();
    }
  }

  private static class KeyValueDateScriptTupleScheme extends TupleScheme<KeyValueDateScript> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, KeyValueDateScript struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.key_field);
      oprot.writeString(struct.value_script);
      BitSet optionals = new BitSet();
      if (struct.isSetScriptParams()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetScriptParams()) {
        {
          oprot.writeI32(struct.scriptParams.size());
          for (ScriptParam _iter28 : struct.scriptParams)
          {
            _iter28.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, KeyValueDateScript struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.key_field = iprot.readString();
      struct.setKey_fieldIsSet(true);
      struct.value_script = iprot.readString();
      struct.setValue_scriptIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.scriptParams = new ArrayList<ScriptParam>(_list29.size);
          for (int _i30 = 0; _i30 < _list29.size; ++_i30)
          {
            ScriptParam _elem31;
            _elem31 = new ScriptParam();
            _elem31.read(iprot);
            struct.scriptParams.add(_elem31);
          }
        }
        struct.setScriptParamsIsSet(true);
      }
    }
  }

}

