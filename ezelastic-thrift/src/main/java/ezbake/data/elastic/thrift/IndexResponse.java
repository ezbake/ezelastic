/*   Copyright (C) 2013-2014 Computer Sciences Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. */

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ezbake.data.elastic.thrift;

import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * This is the response when a document is indexed (inserted).
 */
public class IndexResponse implements org.apache.thrift.TBase<IndexResponse, IndexResponse._Fields>, java.io.Serializable, Cloneable, Comparable<IndexResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("IndexResponse");

  private static final org.apache.thrift.protocol.TField _TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("_type", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField _ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_id", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField _VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("_version", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField PERCOLATE_RESULTS_FIELD_DESC = new org.apache.thrift.protocol.TField("percolateResults", org.apache.thrift.protocol.TType.LIST, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new IndexResponseStandardSchemeFactory());
    schemes.put(TupleScheme.class, new IndexResponseTupleSchemeFactory());
  }

  /**
   * The type the document was inserted under
   */
  public String _type; // required
  /**
   * The id of the inserted document
   */
  public String _id; // required
  /**
   * The ES version (unrelated to EzElastic)
   */
  public long _version; // required
  /**
   * True if the index operation succeeded, otherwise false.
   */
  public boolean success; // optional
  /**
   * If percolation was requested this holds the queries that matched
   */
  public List<PercolateQuery> percolateResults; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * The type the document was inserted under
     */
    _TYPE((short)1, "_type"),
    /**
     * The id of the inserted document
     */
    _ID((short)2, "_id"),
    /**
     * The ES version (unrelated to EzElastic)
     */
    _VERSION((short)3, "_version"),
    /**
     * True if the index operation succeeded, otherwise false.
     */
    SUCCESS((short)4, "success"),
    /**
     * If percolation was requested this holds the queries that matched
     */
    PERCOLATE_RESULTS((short)5, "percolateResults");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // _TYPE
          return _TYPE;
        case 2: // _ID
          return _ID;
        case 3: // _VERSION
          return _VERSION;
        case 4: // SUCCESS
          return SUCCESS;
        case 5: // PERCOLATE_RESULTS
          return PERCOLATE_RESULTS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int ___VERSION_ISSET_ID = 0;
  private static final int __SUCCESS_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.SUCCESS,_Fields.PERCOLATE_RESULTS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields._TYPE, new org.apache.thrift.meta_data.FieldMetaData("_type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields._ID, new org.apache.thrift.meta_data.FieldMetaData("_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields._VERSION, new org.apache.thrift.meta_data.FieldMetaData("_version", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PERCOLATE_RESULTS, new org.apache.thrift.meta_data.FieldMetaData("percolateResults", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PercolateQuery.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(IndexResponse.class, metaDataMap);
  }

  public IndexResponse() {
    this.success = true;

  }

  public IndexResponse(
    String _type,
    String _id,
    long _version)
  {
    this();
    this._type = _type;
    this._id = _id;
    this._version = _version;
    set_versionIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public IndexResponse(IndexResponse other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSet_type()) {
      this._type = other._type;
    }
    if (other.isSet_id()) {
      this._id = other._id;
    }
    this._version = other._version;
    this.success = other.success;
    if (other.isSetPercolateResults()) {
      List<PercolateQuery> __this__percolateResults = new ArrayList<PercolateQuery>(other.percolateResults.size());
      for (PercolateQuery other_element : other.percolateResults) {
        __this__percolateResults.add(new PercolateQuery(other_element));
      }
      this.percolateResults = __this__percolateResults;
    }
  }

  public IndexResponse deepCopy() {
    return new IndexResponse(this);
  }

  @Override
  public void clear() {
    this._type = null;
    this._id = null;
    set_versionIsSet(false);
    this._version = 0;
    this.success = true;

    this.percolateResults = null;
  }

  /**
   * The type the document was inserted under
   */
  public String get_type() {
    return this._type;
  }

  /**
   * The type the document was inserted under
   */
  public IndexResponse set_type(String _type) {
    this._type = _type;
    return this;
  }

  public void unset_type() {
    this._type = null;
  }

  /** Returns true if field _type is set (has been assigned a value) and false otherwise */
  public boolean isSet_type() {
    return this._type != null;
  }

  public void set_typeIsSet(boolean value) {
    if (!value) {
      this._type = null;
    }
  }

  /**
   * The id of the inserted document
   */
  public String get_id() {
    return this._id;
  }

  /**
   * The id of the inserted document
   */
  public IndexResponse set_id(String _id) {
    this._id = _id;
    return this;
  }

  public void unset_id() {
    this._id = null;
  }

  /** Returns true if field _id is set (has been assigned a value) and false otherwise */
  public boolean isSet_id() {
    return this._id != null;
  }

  public void set_idIsSet(boolean value) {
    if (!value) {
      this._id = null;
    }
  }

  /**
   * The ES version (unrelated to EzElastic)
   */
  public long get_version() {
    return this._version;
  }

  /**
   * The ES version (unrelated to EzElastic)
   */
  public IndexResponse set_version(long _version) {
    this._version = _version;
    set_versionIsSet(true);
    return this;
  }

  public void unset_version() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, ___VERSION_ISSET_ID);
  }

  /** Returns true if field _version is set (has been assigned a value) and false otherwise */
  public boolean isSet_version() {
    return EncodingUtils.testBit(__isset_bitfield, ___VERSION_ISSET_ID);
  }

  public void set_versionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, ___VERSION_ISSET_ID, value);
  }

  /**
   * True if the index operation succeeded, otherwise false.
   */
  public boolean isSuccess() {
    return this.success;
  }

  /**
   * True if the index operation succeeded, otherwise false.
   */
  public IndexResponse setSuccess(boolean success) {
    this.success = success;
    setSuccessIsSet(true);
    return this;
  }

  public void unsetSuccess() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
  }

  /** Returns true if field success is set (has been assigned a value) and false otherwise */
  public boolean isSetSuccess() {
    return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
  }

  public void setSuccessIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
  }

  public int getPercolateResultsSize() {
    return (this.percolateResults == null) ? 0 : this.percolateResults.size();
  }

  public java.util.Iterator<PercolateQuery> getPercolateResultsIterator() {
    return (this.percolateResults == null) ? null : this.percolateResults.iterator();
  }

  public void addToPercolateResults(PercolateQuery elem) {
    if (this.percolateResults == null) {
      this.percolateResults = new ArrayList<PercolateQuery>();
    }
    this.percolateResults.add(elem);
  }

  /**
   * If percolation was requested this holds the queries that matched
   */
  public List<PercolateQuery> getPercolateResults() {
    return this.percolateResults;
  }

  /**
   * If percolation was requested this holds the queries that matched
   */
  public IndexResponse setPercolateResults(List<PercolateQuery> percolateResults) {
    this.percolateResults = percolateResults;
    return this;
  }

  public void unsetPercolateResults() {
    this.percolateResults = null;
  }

  /** Returns true if field percolateResults is set (has been assigned a value) and false otherwise */
  public boolean isSetPercolateResults() {
    return this.percolateResults != null;
  }

  public void setPercolateResultsIsSet(boolean value) {
    if (!value) {
      this.percolateResults = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case _TYPE:
      if (value == null) {
        unset_type();
      } else {
        set_type((String)value);
      }
      break;

    case _ID:
      if (value == null) {
        unset_id();
      } else {
        set_id((String)value);
      }
      break;

    case _VERSION:
      if (value == null) {
        unset_version();
      } else {
        set_version((Long)value);
      }
      break;

    case SUCCESS:
      if (value == null) {
        unsetSuccess();
      } else {
        setSuccess((Boolean)value);
      }
      break;

    case PERCOLATE_RESULTS:
      if (value == null) {
        unsetPercolateResults();
      } else {
        setPercolateResults((List<PercolateQuery>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case _TYPE:
      return get_type();

    case _ID:
      return get_id();

    case _VERSION:
      return Long.valueOf(get_version());

    case SUCCESS:
      return Boolean.valueOf(isSuccess());

    case PERCOLATE_RESULTS:
      return getPercolateResults();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case _TYPE:
      return isSet_type();
    case _ID:
      return isSet_id();
    case _VERSION:
      return isSet_version();
    case SUCCESS:
      return isSetSuccess();
    case PERCOLATE_RESULTS:
      return isSetPercolateResults();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof IndexResponse)
      return this.equals((IndexResponse)that);
    return false;
  }

  public boolean equals(IndexResponse that) {
    if (that == null)
      return false;

    boolean this_present__type = true && this.isSet_type();
    boolean that_present__type = true && that.isSet_type();
    if (this_present__type || that_present__type) {
      if (!(this_present__type && that_present__type))
        return false;
      if (!this._type.equals(that._type))
        return false;
    }

    boolean this_present__id = true && this.isSet_id();
    boolean that_present__id = true && that.isSet_id();
    if (this_present__id || that_present__id) {
      if (!(this_present__id && that_present__id))
        return false;
      if (!this._id.equals(that._id))
        return false;
    }

    boolean this_present__version = true;
    boolean that_present__version = true;
    if (this_present__version || that_present__version) {
      if (!(this_present__version && that_present__version))
        return false;
      if (this._version != that._version)
        return false;
    }

    boolean this_present_success = true && this.isSetSuccess();
    boolean that_present_success = true && that.isSetSuccess();
    if (this_present_success || that_present_success) {
      if (!(this_present_success && that_present_success))
        return false;
      if (this.success != that.success)
        return false;
    }

    boolean this_present_percolateResults = true && this.isSetPercolateResults();
    boolean that_present_percolateResults = true && that.isSetPercolateResults();
    if (this_present_percolateResults || that_present_percolateResults) {
      if (!(this_present_percolateResults && that_present_percolateResults))
        return false;
      if (!this.percolateResults.equals(that.percolateResults))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present__type = true && (isSet_type());
    builder.append(present__type);
    if (present__type)
      builder.append(_type);

    boolean present__id = true && (isSet_id());
    builder.append(present__id);
    if (present__id)
      builder.append(_id);

    boolean present__version = true;
    builder.append(present__version);
    if (present__version)
      builder.append(_version);

    boolean present_success = true && (isSetSuccess());
    builder.append(present_success);
    if (present_success)
      builder.append(success);

    boolean present_percolateResults = true && (isSetPercolateResults());
    builder.append(present_percolateResults);
    if (present_percolateResults)
      builder.append(percolateResults);

    return builder.toHashCode();
  }

  @Override
  public int compareTo(IndexResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSet_type()).compareTo(other.isSet_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._type, other._type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSet_id()).compareTo(other.isSet_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._id, other._id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSet_version()).compareTo(other.isSet_version());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_version()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._version, other._version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuccess()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPercolateResults()).compareTo(other.isSetPercolateResults());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPercolateResults()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.percolateResults, other.percolateResults);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("IndexResponse(");
    boolean first = true;

    sb.append("_type:");
    if (this._type == null) {
      sb.append("null");
    } else {
      sb.append(this._type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("_id:");
    if (this._id == null) {
      sb.append("null");
    } else {
      sb.append(this._id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("_version:");
    sb.append(this._version);
    first = false;
    if (isSetSuccess()) {
      if (!first) sb.append(", ");
      sb.append("success:");
      sb.append(this.success);
      first = false;
    }
    if (isSetPercolateResults()) {
      if (!first) sb.append(", ");
      sb.append("percolateResults:");
      if (this.percolateResults == null) {
        sb.append("null");
      } else {
        sb.append(this.percolateResults);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (_type == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_type' was not present! Struct: " + toString());
    }
    if (_id == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_id' was not present! Struct: " + toString());
    }
    // alas, we cannot check '_version' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class IndexResponseStandardSchemeFactory implements SchemeFactory {
    public IndexResponseStandardScheme getScheme() {
      return new IndexResponseStandardScheme();
    }
  }

  private static class IndexResponseStandardScheme extends StandardScheme<IndexResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, IndexResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // _TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct._type = iprot.readString();
              struct.set_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // _ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct._id = iprot.readString();
              struct.set_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // _VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct._version = iprot.readI64();
              struct.set_versionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SUCCESS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.success = iprot.readBool();
              struct.setSuccessIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PERCOLATE_RESULTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list112 = iprot.readListBegin();
                struct.percolateResults = new ArrayList<PercolateQuery>(_list112.size);
                for (int _i113 = 0; _i113 < _list112.size; ++_i113)
                {
                  PercolateQuery _elem114;
                  _elem114 = new PercolateQuery();
                  _elem114.read(iprot);
                  struct.percolateResults.add(_elem114);
                }
                iprot.readListEnd();
              }
              struct.setPercolateResultsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSet_version()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field '_version' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, IndexResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct._type != null) {
        oprot.writeFieldBegin(_TYPE_FIELD_DESC);
        oprot.writeString(struct._type);
        oprot.writeFieldEnd();
      }
      if (struct._id != null) {
        oprot.writeFieldBegin(_ID_FIELD_DESC);
        oprot.writeString(struct._id);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(_VERSION_FIELD_DESC);
      oprot.writeI64(struct._version);
      oprot.writeFieldEnd();
      if (struct.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
      }
      if (struct.percolateResults != null) {
        if (struct.isSetPercolateResults()) {
          oprot.writeFieldBegin(PERCOLATE_RESULTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.percolateResults.size()));
            for (PercolateQuery _iter115 : struct.percolateResults)
            {
              _iter115.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class IndexResponseTupleSchemeFactory implements SchemeFactory {
    public IndexResponseTupleScheme getScheme() {
      return new IndexResponseTupleScheme();
    }
  }

  private static class IndexResponseTupleScheme extends TupleScheme<IndexResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, IndexResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct._type);
      oprot.writeString(struct._id);
      oprot.writeI64(struct._version);
      BitSet optionals = new BitSet();
      if (struct.isSetSuccess()) {
        optionals.set(0);
      }
      if (struct.isSetPercolateResults()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetSuccess()) {
        oprot.writeBool(struct.success);
      }
      if (struct.isSetPercolateResults()) {
        {
          oprot.writeI32(struct.percolateResults.size());
          for (PercolateQuery _iter116 : struct.percolateResults)
          {
            _iter116.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, IndexResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct._type = iprot.readString();
      struct.set_typeIsSet(true);
      struct._id = iprot.readString();
      struct.set_idIsSet(true);
      struct._version = iprot.readI64();
      struct.set_versionIsSet(true);
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.success = iprot.readBool();
        struct.setSuccessIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list117 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.percolateResults = new ArrayList<PercolateQuery>(_list117.size);
          for (int _i118 = 0; _i118 < _list117.size; ++_i118)
          {
            PercolateQuery _elem119;
            _elem119 = new PercolateQuery();
            _elem119.read(iprot);
            struct.percolateResults.add(_elem119);
          }
        }
        struct.setPercolateResultsIsSet(true);
      }
    }
  }

}

