/*   Copyright (C) 2013-2014 Computer Sciences Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. */

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ezbake.data.elastic.thrift;

import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class KeyValueScript implements org.apache.thrift.TBase<KeyValueScript, KeyValueScript._Fields>, java.io.Serializable, Cloneable, Comparable<KeyValueScript> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("KeyValueScript");

  private static final org.apache.thrift.protocol.TField KEY_SCRIPT_FIELD_DESC = new org.apache.thrift.protocol.TField("keyScript", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField VALUE_SCRIPT_FIELD_DESC = new org.apache.thrift.protocol.TField("valueScript", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SCRIPT_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("scriptParams", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new KeyValueScriptStandardSchemeFactory());
    schemes.put(TupleScheme.class, new KeyValueScriptTupleSchemeFactory());
  }

  public String keyScript; // required
  public String valueScript; // required
  public List<ScriptParam> scriptParams; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    KEY_SCRIPT((short)1, "keyScript"),
    VALUE_SCRIPT((short)2, "valueScript"),
    SCRIPT_PARAMS((short)3, "scriptParams");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // KEY_SCRIPT
          return KEY_SCRIPT;
        case 2: // VALUE_SCRIPT
          return VALUE_SCRIPT;
        case 3: // SCRIPT_PARAMS
          return SCRIPT_PARAMS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.SCRIPT_PARAMS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.KEY_SCRIPT, new org.apache.thrift.meta_data.FieldMetaData("keyScript", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VALUE_SCRIPT, new org.apache.thrift.meta_data.FieldMetaData("valueScript", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SCRIPT_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("scriptParams", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ScriptParam.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(KeyValueScript.class, metaDataMap);
  }

  public KeyValueScript() {
  }

  public KeyValueScript(
    String keyScript,
    String valueScript)
  {
    this();
    this.keyScript = keyScript;
    this.valueScript = valueScript;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public KeyValueScript(KeyValueScript other) {
    if (other.isSetKeyScript()) {
      this.keyScript = other.keyScript;
    }
    if (other.isSetValueScript()) {
      this.valueScript = other.valueScript;
    }
    if (other.isSetScriptParams()) {
      List<ScriptParam> __this__scriptParams = new ArrayList<ScriptParam>(other.scriptParams.size());
      for (ScriptParam other_element : other.scriptParams) {
        __this__scriptParams.add(new ScriptParam(other_element));
      }
      this.scriptParams = __this__scriptParams;
    }
  }

  public KeyValueScript deepCopy() {
    return new KeyValueScript(this);
  }

  @Override
  public void clear() {
    this.keyScript = null;
    this.valueScript = null;
    this.scriptParams = null;
  }

  public String getKeyScript() {
    return this.keyScript;
  }

  public KeyValueScript setKeyScript(String keyScript) {
    this.keyScript = keyScript;
    return this;
  }

  public void unsetKeyScript() {
    this.keyScript = null;
  }

  /** Returns true if field keyScript is set (has been assigned a value) and false otherwise */
  public boolean isSetKeyScript() {
    return this.keyScript != null;
  }

  public void setKeyScriptIsSet(boolean value) {
    if (!value) {
      this.keyScript = null;
    }
  }

  public String getValueScript() {
    return this.valueScript;
  }

  public KeyValueScript setValueScript(String valueScript) {
    this.valueScript = valueScript;
    return this;
  }

  public void unsetValueScript() {
    this.valueScript = null;
  }

  /** Returns true if field valueScript is set (has been assigned a value) and false otherwise */
  public boolean isSetValueScript() {
    return this.valueScript != null;
  }

  public void setValueScriptIsSet(boolean value) {
    if (!value) {
      this.valueScript = null;
    }
  }

  public int getScriptParamsSize() {
    return (this.scriptParams == null) ? 0 : this.scriptParams.size();
  }

  public java.util.Iterator<ScriptParam> getScriptParamsIterator() {
    return (this.scriptParams == null) ? null : this.scriptParams.iterator();
  }

  public void addToScriptParams(ScriptParam elem) {
    if (this.scriptParams == null) {
      this.scriptParams = new ArrayList<ScriptParam>();
    }
    this.scriptParams.add(elem);
  }

  public List<ScriptParam> getScriptParams() {
    return this.scriptParams;
  }

  public KeyValueScript setScriptParams(List<ScriptParam> scriptParams) {
    this.scriptParams = scriptParams;
    return this;
  }

  public void unsetScriptParams() {
    this.scriptParams = null;
  }

  /** Returns true if field scriptParams is set (has been assigned a value) and false otherwise */
  public boolean isSetScriptParams() {
    return this.scriptParams != null;
  }

  public void setScriptParamsIsSet(boolean value) {
    if (!value) {
      this.scriptParams = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case KEY_SCRIPT:
      if (value == null) {
        unsetKeyScript();
      } else {
        setKeyScript((String)value);
      }
      break;

    case VALUE_SCRIPT:
      if (value == null) {
        unsetValueScript();
      } else {
        setValueScript((String)value);
      }
      break;

    case SCRIPT_PARAMS:
      if (value == null) {
        unsetScriptParams();
      } else {
        setScriptParams((List<ScriptParam>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case KEY_SCRIPT:
      return getKeyScript();

    case VALUE_SCRIPT:
      return getValueScript();

    case SCRIPT_PARAMS:
      return getScriptParams();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case KEY_SCRIPT:
      return isSetKeyScript();
    case VALUE_SCRIPT:
      return isSetValueScript();
    case SCRIPT_PARAMS:
      return isSetScriptParams();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof KeyValueScript)
      return this.equals((KeyValueScript)that);
    return false;
  }

  public boolean equals(KeyValueScript that) {
    if (that == null)
      return false;

    boolean this_present_keyScript = true && this.isSetKeyScript();
    boolean that_present_keyScript = true && that.isSetKeyScript();
    if (this_present_keyScript || that_present_keyScript) {
      if (!(this_present_keyScript && that_present_keyScript))
        return false;
      if (!this.keyScript.equals(that.keyScript))
        return false;
    }

    boolean this_present_valueScript = true && this.isSetValueScript();
    boolean that_present_valueScript = true && that.isSetValueScript();
    if (this_present_valueScript || that_present_valueScript) {
      if (!(this_present_valueScript && that_present_valueScript))
        return false;
      if (!this.valueScript.equals(that.valueScript))
        return false;
    }

    boolean this_present_scriptParams = true && this.isSetScriptParams();
    boolean that_present_scriptParams = true && that.isSetScriptParams();
    if (this_present_scriptParams || that_present_scriptParams) {
      if (!(this_present_scriptParams && that_present_scriptParams))
        return false;
      if (!this.scriptParams.equals(that.scriptParams))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_keyScript = true && (isSetKeyScript());
    builder.append(present_keyScript);
    if (present_keyScript)
      builder.append(keyScript);

    boolean present_valueScript = true && (isSetValueScript());
    builder.append(present_valueScript);
    if (present_valueScript)
      builder.append(valueScript);

    boolean present_scriptParams = true && (isSetScriptParams());
    builder.append(present_scriptParams);
    if (present_scriptParams)
      builder.append(scriptParams);

    return builder.toHashCode();
  }

  @Override
  public int compareTo(KeyValueScript other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetKeyScript()).compareTo(other.isSetKeyScript());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKeyScript()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keyScript, other.keyScript);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetValueScript()).compareTo(other.isSetValueScript());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValueScript()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.valueScript, other.valueScript);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetScriptParams()).compareTo(other.isSetScriptParams());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScriptParams()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scriptParams, other.scriptParams);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("KeyValueScript(");
    boolean first = true;

    sb.append("keyScript:");
    if (this.keyScript == null) {
      sb.append("null");
    } else {
      sb.append(this.keyScript);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("valueScript:");
    if (this.valueScript == null) {
      sb.append("null");
    } else {
      sb.append(this.valueScript);
    }
    first = false;
    if (isSetScriptParams()) {
      if (!first) sb.append(", ");
      sb.append("scriptParams:");
      if (this.scriptParams == null) {
        sb.append("null");
      } else {
        sb.append(this.scriptParams);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (keyScript == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'keyScript' was not present! Struct: " + toString());
    }
    if (valueScript == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'valueScript' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class KeyValueScriptStandardSchemeFactory implements SchemeFactory {
    public KeyValueScriptStandardScheme getScheme() {
      return new KeyValueScriptStandardScheme();
    }
  }

  private static class KeyValueScriptStandardScheme extends StandardScheme<KeyValueScript> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, KeyValueScript struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // KEY_SCRIPT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.keyScript = iprot.readString();
              struct.setKeyScriptIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // VALUE_SCRIPT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.valueScript = iprot.readString();
              struct.setValueScriptIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SCRIPT_PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.scriptParams = new ArrayList<ScriptParam>(_list8.size);
                for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                {
                  ScriptParam _elem10;
                  _elem10 = new ScriptParam();
                  _elem10.read(iprot);
                  struct.scriptParams.add(_elem10);
                }
                iprot.readListEnd();
              }
              struct.setScriptParamsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, KeyValueScript struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.keyScript != null) {
        oprot.writeFieldBegin(KEY_SCRIPT_FIELD_DESC);
        oprot.writeString(struct.keyScript);
        oprot.writeFieldEnd();
      }
      if (struct.valueScript != null) {
        oprot.writeFieldBegin(VALUE_SCRIPT_FIELD_DESC);
        oprot.writeString(struct.valueScript);
        oprot.writeFieldEnd();
      }
      if (struct.scriptParams != null) {
        if (struct.isSetScriptParams()) {
          oprot.writeFieldBegin(SCRIPT_PARAMS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.scriptParams.size()));
            for (ScriptParam _iter11 : struct.scriptParams)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class KeyValueScriptTupleSchemeFactory implements SchemeFactory {
    public KeyValueScriptTupleScheme getScheme() {
      return new KeyValueScriptTupleScheme();
    }
  }

  private static class KeyValueScriptTupleScheme extends TupleScheme<KeyValueScript> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, KeyValueScript struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.keyScript);
      oprot.writeString(struct.valueScript);
      BitSet optionals = new BitSet();
      if (struct.isSetScriptParams()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetScriptParams()) {
        {
          oprot.writeI32(struct.scriptParams.size());
          for (ScriptParam _iter12 : struct.scriptParams)
          {
            _iter12.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, KeyValueScript struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.keyScript = iprot.readString();
      struct.setKeyScriptIsSet(true);
      struct.valueScript = iprot.readString();
      struct.setValueScriptIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.scriptParams = new ArrayList<ScriptParam>(_list13.size);
          for (int _i14 = 0; _i14 < _list13.size; ++_i14)
          {
            ScriptParam _elem15;
            _elem15 = new ScriptParam();
            _elem15.read(iprot);
            struct.scriptParams.add(_elem15);
          }
        }
        struct.setScriptParamsIsSet(true);
      }
    }
  }

}

