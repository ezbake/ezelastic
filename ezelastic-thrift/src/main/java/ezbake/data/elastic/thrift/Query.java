/*   Copyright (C) 2013-2014 Computer Sciences Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. */

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ezbake.data.elastic.thrift;

import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Query object for use with searching.
 */
public class Query implements org.apache.thrift.TBase<Query, Query._Fields>, java.io.Serializable, Cloneable, Comparable<Query> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Query");

  private static final org.apache.thrift.protocol.TField SEARCH_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("searchString", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField SORT_CRITERIA_FIELD_DESC = new org.apache.thrift.protocol.TField("sortCriteria", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField FACETS_FIELD_DESC = new org.apache.thrift.protocol.TField("facets", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField RETURNED_FIELDS_FIELD_DESC = new org.apache.thrift.protocol.TField("returnedFields", org.apache.thrift.protocol.TType.SET, (short)6);
  private static final org.apache.thrift.protocol.TField FILTER_JSON_FIELD_DESC = new org.apache.thrift.protocol.TField("filterJson", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField HIGHLIGHTING_FIELD_DESC = new org.apache.thrift.protocol.TField("highlighting", org.apache.thrift.protocol.TType.STRUCT, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new QueryStandardSchemeFactory());
    schemes.put(TupleScheme.class, new QueryTupleSchemeFactory());
  }

  /**
   * A Lucene query string or ES JSON query
   */
  public String searchString; // required
  /**
   * A type to restrict the search to
   */
  public String type; // optional
  /**
   * A page of results to request
   */
  public Page page; // optional
  /**
   * Sorting criteria
   */
  public List<SortCriteria> sortCriteria; // optional
  /**
   * Requests for facets on the results
   */
  public List<ezbake.data.elastic.thrift.Facet> facets; // optional
  /**
   * A subset of the fields to return
   */
  public Set<String> returnedFields; // optional
  /**
   * ES filter JSON to add
   */
  public String filterJson; // optional
  /**
   * Highlighting information to return
   */
  public HighlightRequest highlighting; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * A Lucene query string or ES JSON query
     */
    SEARCH_STRING((short)1, "searchString"),
    /**
     * A type to restrict the search to
     */
    TYPE((short)2, "type"),
    /**
     * A page of results to request
     */
    PAGE((short)3, "page"),
    /**
     * Sorting criteria
     */
    SORT_CRITERIA((short)4, "sortCriteria"),
    /**
     * Requests for facets on the results
     */
    FACETS((short)5, "facets"),
    /**
     * A subset of the fields to return
     */
    RETURNED_FIELDS((short)6, "returnedFields"),
    /**
     * ES filter JSON to add
     */
    FILTER_JSON((short)7, "filterJson"),
    /**
     * Highlighting information to return
     */
    HIGHLIGHTING((short)8, "highlighting");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SEARCH_STRING
          return SEARCH_STRING;
        case 2: // TYPE
          return TYPE;
        case 3: // PAGE
          return PAGE;
        case 4: // SORT_CRITERIA
          return SORT_CRITERIA;
        case 5: // FACETS
          return FACETS;
        case 6: // RETURNED_FIELDS
          return RETURNED_FIELDS;
        case 7: // FILTER_JSON
          return FILTER_JSON;
        case 8: // HIGHLIGHTING
          return HIGHLIGHTING;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.TYPE,_Fields.PAGE,_Fields.SORT_CRITERIA,_Fields.FACETS,_Fields.RETURNED_FIELDS,_Fields.FILTER_JSON,_Fields.HIGHLIGHTING};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SEARCH_STRING, new org.apache.thrift.meta_data.FieldMetaData("searchString", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Page.class)));
    tmpMap.put(_Fields.SORT_CRITERIA, new org.apache.thrift.meta_data.FieldMetaData("sortCriteria", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SortCriteria.class))));
    tmpMap.put(_Fields.FACETS, new org.apache.thrift.meta_data.FieldMetaData("facets", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.data.elastic.thrift.Facet.class))));
    tmpMap.put(_Fields.RETURNED_FIELDS, new org.apache.thrift.meta_data.FieldMetaData("returnedFields", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.FILTER_JSON, new org.apache.thrift.meta_data.FieldMetaData("filterJson", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HIGHLIGHTING, new org.apache.thrift.meta_data.FieldMetaData("highlighting", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HighlightRequest.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Query.class, metaDataMap);
  }

  public Query() {
  }

  public Query(
    String searchString)
  {
    this();
    this.searchString = searchString;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Query(Query other) {
    if (other.isSetSearchString()) {
      this.searchString = other.searchString;
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetPage()) {
      this.page = new Page(other.page);
    }
    if (other.isSetSortCriteria()) {
      List<SortCriteria> __this__sortCriteria = new ArrayList<SortCriteria>(other.sortCriteria.size());
      for (SortCriteria other_element : other.sortCriteria) {
        __this__sortCriteria.add(new SortCriteria(other_element));
      }
      this.sortCriteria = __this__sortCriteria;
    }
    if (other.isSetFacets()) {
      List<ezbake.data.elastic.thrift.Facet> __this__facets = new ArrayList<ezbake.data.elastic.thrift.Facet>(other.facets.size());
      for (ezbake.data.elastic.thrift.Facet other_element : other.facets) {
        __this__facets.add(new ezbake.data.elastic.thrift.Facet(other_element));
      }
      this.facets = __this__facets;
    }
    if (other.isSetReturnedFields()) {
      Set<String> __this__returnedFields = new HashSet<String>(other.returnedFields);
      this.returnedFields = __this__returnedFields;
    }
    if (other.isSetFilterJson()) {
      this.filterJson = other.filterJson;
    }
    if (other.isSetHighlighting()) {
      this.highlighting = new HighlightRequest(other.highlighting);
    }
  }

  public Query deepCopy() {
    return new Query(this);
  }

  @Override
  public void clear() {
    this.searchString = null;
    this.type = null;
    this.page = null;
    this.sortCriteria = null;
    this.facets = null;
    this.returnedFields = null;
    this.filterJson = null;
    this.highlighting = null;
  }

  /**
   * A Lucene query string or ES JSON query
   */
  public String getSearchString() {
    return this.searchString;
  }

  /**
   * A Lucene query string or ES JSON query
   */
  public Query setSearchString(String searchString) {
    this.searchString = searchString;
    return this;
  }

  public void unsetSearchString() {
    this.searchString = null;
  }

  /** Returns true if field searchString is set (has been assigned a value) and false otherwise */
  public boolean isSetSearchString() {
    return this.searchString != null;
  }

  public void setSearchStringIsSet(boolean value) {
    if (!value) {
      this.searchString = null;
    }
  }

  /**
   * A type to restrict the search to
   */
  public String getType() {
    return this.type;
  }

  /**
   * A type to restrict the search to
   */
  public Query setType(String type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  /**
   * A page of results to request
   */
  public Page getPage() {
    return this.page;
  }

  /**
   * A page of results to request
   */
  public Query setPage(Page page) {
    this.page = page;
    return this;
  }

  public void unsetPage() {
    this.page = null;
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return this.page != null;
  }

  public void setPageIsSet(boolean value) {
    if (!value) {
      this.page = null;
    }
  }

  public int getSortCriteriaSize() {
    return (this.sortCriteria == null) ? 0 : this.sortCriteria.size();
  }

  public java.util.Iterator<SortCriteria> getSortCriteriaIterator() {
    return (this.sortCriteria == null) ? null : this.sortCriteria.iterator();
  }

  public void addToSortCriteria(SortCriteria elem) {
    if (this.sortCriteria == null) {
      this.sortCriteria = new ArrayList<SortCriteria>();
    }
    this.sortCriteria.add(elem);
  }

  /**
   * Sorting criteria
   */
  public List<SortCriteria> getSortCriteria() {
    return this.sortCriteria;
  }

  /**
   * Sorting criteria
   */
  public Query setSortCriteria(List<SortCriteria> sortCriteria) {
    this.sortCriteria = sortCriteria;
    return this;
  }

  public void unsetSortCriteria() {
    this.sortCriteria = null;
  }

  /** Returns true if field sortCriteria is set (has been assigned a value) and false otherwise */
  public boolean isSetSortCriteria() {
    return this.sortCriteria != null;
  }

  public void setSortCriteriaIsSet(boolean value) {
    if (!value) {
      this.sortCriteria = null;
    }
  }

  public int getFacetsSize() {
    return (this.facets == null) ? 0 : this.facets.size();
  }

  public java.util.Iterator<ezbake.data.elastic.thrift.Facet> getFacetsIterator() {
    return (this.facets == null) ? null : this.facets.iterator();
  }

  public void addToFacets(ezbake.data.elastic.thrift.Facet elem) {
    if (this.facets == null) {
      this.facets = new ArrayList<ezbake.data.elastic.thrift.Facet>();
    }
    this.facets.add(elem);
  }

  /**
   * Requests for facets on the results
   */
  public List<ezbake.data.elastic.thrift.Facet> getFacets() {
    return this.facets;
  }

  /**
   * Requests for facets on the results
   */
  public Query setFacets(List<ezbake.data.elastic.thrift.Facet> facets) {
    this.facets = facets;
    return this;
  }

  public void unsetFacets() {
    this.facets = null;
  }

  /** Returns true if field facets is set (has been assigned a value) and false otherwise */
  public boolean isSetFacets() {
    return this.facets != null;
  }

  public void setFacetsIsSet(boolean value) {
    if (!value) {
      this.facets = null;
    }
  }

  public int getReturnedFieldsSize() {
    return (this.returnedFields == null) ? 0 : this.returnedFields.size();
  }

  public java.util.Iterator<String> getReturnedFieldsIterator() {
    return (this.returnedFields == null) ? null : this.returnedFields.iterator();
  }

  public void addToReturnedFields(String elem) {
    if (this.returnedFields == null) {
      this.returnedFields = new HashSet<String>();
    }
    this.returnedFields.add(elem);
  }

  /**
   * A subset of the fields to return
   */
  public Set<String> getReturnedFields() {
    return this.returnedFields;
  }

  /**
   * A subset of the fields to return
   */
  public Query setReturnedFields(Set<String> returnedFields) {
    this.returnedFields = returnedFields;
    return this;
  }

  public void unsetReturnedFields() {
    this.returnedFields = null;
  }

  /** Returns true if field returnedFields is set (has been assigned a value) and false otherwise */
  public boolean isSetReturnedFields() {
    return this.returnedFields != null;
  }

  public void setReturnedFieldsIsSet(boolean value) {
    if (!value) {
      this.returnedFields = null;
    }
  }

  /**
   * ES filter JSON to add
   */
  public String getFilterJson() {
    return this.filterJson;
  }

  /**
   * ES filter JSON to add
   */
  public Query setFilterJson(String filterJson) {
    this.filterJson = filterJson;
    return this;
  }

  public void unsetFilterJson() {
    this.filterJson = null;
  }

  /** Returns true if field filterJson is set (has been assigned a value) and false otherwise */
  public boolean isSetFilterJson() {
    return this.filterJson != null;
  }

  public void setFilterJsonIsSet(boolean value) {
    if (!value) {
      this.filterJson = null;
    }
  }

  /**
   * Highlighting information to return
   */
  public HighlightRequest getHighlighting() {
    return this.highlighting;
  }

  /**
   * Highlighting information to return
   */
  public Query setHighlighting(HighlightRequest highlighting) {
    this.highlighting = highlighting;
    return this;
  }

  public void unsetHighlighting() {
    this.highlighting = null;
  }

  /** Returns true if field highlighting is set (has been assigned a value) and false otherwise */
  public boolean isSetHighlighting() {
    return this.highlighting != null;
  }

  public void setHighlightingIsSet(boolean value) {
    if (!value) {
      this.highlighting = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SEARCH_STRING:
      if (value == null) {
        unsetSearchString();
      } else {
        setSearchString((String)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((String)value);
      }
      break;

    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((Page)value);
      }
      break;

    case SORT_CRITERIA:
      if (value == null) {
        unsetSortCriteria();
      } else {
        setSortCriteria((List<SortCriteria>)value);
      }
      break;

    case FACETS:
      if (value == null) {
        unsetFacets();
      } else {
        setFacets((List<ezbake.data.elastic.thrift.Facet>)value);
      }
      break;

    case RETURNED_FIELDS:
      if (value == null) {
        unsetReturnedFields();
      } else {
        setReturnedFields((Set<String>)value);
      }
      break;

    case FILTER_JSON:
      if (value == null) {
        unsetFilterJson();
      } else {
        setFilterJson((String)value);
      }
      break;

    case HIGHLIGHTING:
      if (value == null) {
        unsetHighlighting();
      } else {
        setHighlighting((HighlightRequest)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SEARCH_STRING:
      return getSearchString();

    case TYPE:
      return getType();

    case PAGE:
      return getPage();

    case SORT_CRITERIA:
      return getSortCriteria();

    case FACETS:
      return getFacets();

    case RETURNED_FIELDS:
      return getReturnedFields();

    case FILTER_JSON:
      return getFilterJson();

    case HIGHLIGHTING:
      return getHighlighting();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SEARCH_STRING:
      return isSetSearchString();
    case TYPE:
      return isSetType();
    case PAGE:
      return isSetPage();
    case SORT_CRITERIA:
      return isSetSortCriteria();
    case FACETS:
      return isSetFacets();
    case RETURNED_FIELDS:
      return isSetReturnedFields();
    case FILTER_JSON:
      return isSetFilterJson();
    case HIGHLIGHTING:
      return isSetHighlighting();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Query)
      return this.equals((Query)that);
    return false;
  }

  public boolean equals(Query that) {
    if (that == null)
      return false;

    boolean this_present_searchString = true && this.isSetSearchString();
    boolean that_present_searchString = true && that.isSetSearchString();
    if (this_present_searchString || that_present_searchString) {
      if (!(this_present_searchString && that_present_searchString))
        return false;
      if (!this.searchString.equals(that.searchString))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_page = true && this.isSetPage();
    boolean that_present_page = true && that.isSetPage();
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (!this.page.equals(that.page))
        return false;
    }

    boolean this_present_sortCriteria = true && this.isSetSortCriteria();
    boolean that_present_sortCriteria = true && that.isSetSortCriteria();
    if (this_present_sortCriteria || that_present_sortCriteria) {
      if (!(this_present_sortCriteria && that_present_sortCriteria))
        return false;
      if (!this.sortCriteria.equals(that.sortCriteria))
        return false;
    }

    boolean this_present_facets = true && this.isSetFacets();
    boolean that_present_facets = true && that.isSetFacets();
    if (this_present_facets || that_present_facets) {
      if (!(this_present_facets && that_present_facets))
        return false;
      if (!this.facets.equals(that.facets))
        return false;
    }

    boolean this_present_returnedFields = true && this.isSetReturnedFields();
    boolean that_present_returnedFields = true && that.isSetReturnedFields();
    if (this_present_returnedFields || that_present_returnedFields) {
      if (!(this_present_returnedFields && that_present_returnedFields))
        return false;
      if (!this.returnedFields.equals(that.returnedFields))
        return false;
    }

    boolean this_present_filterJson = true && this.isSetFilterJson();
    boolean that_present_filterJson = true && that.isSetFilterJson();
    if (this_present_filterJson || that_present_filterJson) {
      if (!(this_present_filterJson && that_present_filterJson))
        return false;
      if (!this.filterJson.equals(that.filterJson))
        return false;
    }

    boolean this_present_highlighting = true && this.isSetHighlighting();
    boolean that_present_highlighting = true && that.isSetHighlighting();
    if (this_present_highlighting || that_present_highlighting) {
      if (!(this_present_highlighting && that_present_highlighting))
        return false;
      if (!this.highlighting.equals(that.highlighting))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_searchString = true && (isSetSearchString());
    builder.append(present_searchString);
    if (present_searchString)
      builder.append(searchString);

    boolean present_type = true && (isSetType());
    builder.append(present_type);
    if (present_type)
      builder.append(type);

    boolean present_page = true && (isSetPage());
    builder.append(present_page);
    if (present_page)
      builder.append(page);

    boolean present_sortCriteria = true && (isSetSortCriteria());
    builder.append(present_sortCriteria);
    if (present_sortCriteria)
      builder.append(sortCriteria);

    boolean present_facets = true && (isSetFacets());
    builder.append(present_facets);
    if (present_facets)
      builder.append(facets);

    boolean present_returnedFields = true && (isSetReturnedFields());
    builder.append(present_returnedFields);
    if (present_returnedFields)
      builder.append(returnedFields);

    boolean present_filterJson = true && (isSetFilterJson());
    builder.append(present_filterJson);
    if (present_filterJson)
      builder.append(filterJson);

    boolean present_highlighting = true && (isSetHighlighting());
    builder.append(present_highlighting);
    if (present_highlighting)
      builder.append(highlighting);

    return builder.toHashCode();
  }

  @Override
  public int compareTo(Query other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSearchString()).compareTo(other.isSetSearchString());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSearchString()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.searchString, other.searchString);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSortCriteria()).compareTo(other.isSetSortCriteria());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSortCriteria()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sortCriteria, other.sortCriteria);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFacets()).compareTo(other.isSetFacets());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFacets()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.facets, other.facets);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReturnedFields()).compareTo(other.isSetReturnedFields());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReturnedFields()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.returnedFields, other.returnedFields);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFilterJson()).compareTo(other.isSetFilterJson());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFilterJson()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filterJson, other.filterJson);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHighlighting()).compareTo(other.isSetHighlighting());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHighlighting()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.highlighting, other.highlighting);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Query(");
    boolean first = true;

    sb.append("searchString:");
    if (this.searchString == null) {
      sb.append("null");
    } else {
      sb.append(this.searchString);
    }
    first = false;
    if (isSetType()) {
      if (!first) sb.append(", ");
      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
    }
    if (isSetPage()) {
      if (!first) sb.append(", ");
      sb.append("page:");
      if (this.page == null) {
        sb.append("null");
      } else {
        sb.append(this.page);
      }
      first = false;
    }
    if (isSetSortCriteria()) {
      if (!first) sb.append(", ");
      sb.append("sortCriteria:");
      if (this.sortCriteria == null) {
        sb.append("null");
      } else {
        sb.append(this.sortCriteria);
      }
      first = false;
    }
    if (isSetFacets()) {
      if (!first) sb.append(", ");
      sb.append("facets:");
      if (this.facets == null) {
        sb.append("null");
      } else {
        sb.append(this.facets);
      }
      first = false;
    }
    if (isSetReturnedFields()) {
      if (!first) sb.append(", ");
      sb.append("returnedFields:");
      if (this.returnedFields == null) {
        sb.append("null");
      } else {
        sb.append(this.returnedFields);
      }
      first = false;
    }
    if (isSetFilterJson()) {
      if (!first) sb.append(", ");
      sb.append("filterJson:");
      if (this.filterJson == null) {
        sb.append("null");
      } else {
        sb.append(this.filterJson);
      }
      first = false;
    }
    if (isSetHighlighting()) {
      if (!first) sb.append(", ");
      sb.append("highlighting:");
      if (this.highlighting == null) {
        sb.append("null");
      } else {
        sb.append(this.highlighting);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (searchString == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'searchString' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (page != null) {
      page.validate();
    }
    if (highlighting != null) {
      highlighting.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class QueryStandardSchemeFactory implements SchemeFactory {
    public QueryStandardScheme getScheme() {
      return new QueryStandardScheme();
    }
  }

  private static class QueryStandardScheme extends StandardScheme<Query> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Query struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SEARCH_STRING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.searchString = iprot.readString();
              struct.setSearchStringIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.type = iprot.readString();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.page = new Page();
              struct.page.read(iprot);
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SORT_CRITERIA
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list60 = iprot.readListBegin();
                struct.sortCriteria = new ArrayList<SortCriteria>(_list60.size);
                for (int _i61 = 0; _i61 < _list60.size; ++_i61)
                {
                  SortCriteria _elem62;
                  _elem62 = new SortCriteria();
                  _elem62.read(iprot);
                  struct.sortCriteria.add(_elem62);
                }
                iprot.readListEnd();
              }
              struct.setSortCriteriaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FACETS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list63 = iprot.readListBegin();
                struct.facets = new ArrayList<ezbake.data.elastic.thrift.Facet>(_list63.size);
                for (int _i64 = 0; _i64 < _list63.size; ++_i64)
                {
                  ezbake.data.elastic.thrift.Facet _elem65;
                  _elem65 = new ezbake.data.elastic.thrift.Facet();
                  _elem65.read(iprot);
                  struct.facets.add(_elem65);
                }
                iprot.readListEnd();
              }
              struct.setFacetsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // RETURNED_FIELDS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set66 = iprot.readSetBegin();
                struct.returnedFields = new HashSet<String>(2*_set66.size);
                for (int _i67 = 0; _i67 < _set66.size; ++_i67)
                {
                  String _elem68;
                  _elem68 = iprot.readString();
                  struct.returnedFields.add(_elem68);
                }
                iprot.readSetEnd();
              }
              struct.setReturnedFieldsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // FILTER_JSON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.filterJson = iprot.readString();
              struct.setFilterJsonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // HIGHLIGHTING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.highlighting = new HighlightRequest();
              struct.highlighting.read(iprot);
              struct.setHighlightingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Query struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.searchString != null) {
        oprot.writeFieldBegin(SEARCH_STRING_FIELD_DESC);
        oprot.writeString(struct.searchString);
        oprot.writeFieldEnd();
      }
      if (struct.type != null) {
        if (struct.isSetType()) {
          oprot.writeFieldBegin(TYPE_FIELD_DESC);
          oprot.writeString(struct.type);
          oprot.writeFieldEnd();
        }
      }
      if (struct.page != null) {
        if (struct.isSetPage()) {
          oprot.writeFieldBegin(PAGE_FIELD_DESC);
          struct.page.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.sortCriteria != null) {
        if (struct.isSetSortCriteria()) {
          oprot.writeFieldBegin(SORT_CRITERIA_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.sortCriteria.size()));
            for (SortCriteria _iter69 : struct.sortCriteria)
            {
              _iter69.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.facets != null) {
        if (struct.isSetFacets()) {
          oprot.writeFieldBegin(FACETS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.facets.size()));
            for (ezbake.data.elastic.thrift.Facet _iter70 : struct.facets)
            {
              _iter70.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.returnedFields != null) {
        if (struct.isSetReturnedFields()) {
          oprot.writeFieldBegin(RETURNED_FIELDS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.returnedFields.size()));
            for (String _iter71 : struct.returnedFields)
            {
              oprot.writeString(_iter71);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.filterJson != null) {
        if (struct.isSetFilterJson()) {
          oprot.writeFieldBegin(FILTER_JSON_FIELD_DESC);
          oprot.writeString(struct.filterJson);
          oprot.writeFieldEnd();
        }
      }
      if (struct.highlighting != null) {
        if (struct.isSetHighlighting()) {
          oprot.writeFieldBegin(HIGHLIGHTING_FIELD_DESC);
          struct.highlighting.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class QueryTupleSchemeFactory implements SchemeFactory {
    public QueryTupleScheme getScheme() {
      return new QueryTupleScheme();
    }
  }

  private static class QueryTupleScheme extends TupleScheme<Query> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Query struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.searchString);
      BitSet optionals = new BitSet();
      if (struct.isSetType()) {
        optionals.set(0);
      }
      if (struct.isSetPage()) {
        optionals.set(1);
      }
      if (struct.isSetSortCriteria()) {
        optionals.set(2);
      }
      if (struct.isSetFacets()) {
        optionals.set(3);
      }
      if (struct.isSetReturnedFields()) {
        optionals.set(4);
      }
      if (struct.isSetFilterJson()) {
        optionals.set(5);
      }
      if (struct.isSetHighlighting()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetType()) {
        oprot.writeString(struct.type);
      }
      if (struct.isSetPage()) {
        struct.page.write(oprot);
      }
      if (struct.isSetSortCriteria()) {
        {
          oprot.writeI32(struct.sortCriteria.size());
          for (SortCriteria _iter72 : struct.sortCriteria)
          {
            _iter72.write(oprot);
          }
        }
      }
      if (struct.isSetFacets()) {
        {
          oprot.writeI32(struct.facets.size());
          for (ezbake.data.elastic.thrift.Facet _iter73 : struct.facets)
          {
            _iter73.write(oprot);
          }
        }
      }
      if (struct.isSetReturnedFields()) {
        {
          oprot.writeI32(struct.returnedFields.size());
          for (String _iter74 : struct.returnedFields)
          {
            oprot.writeString(_iter74);
          }
        }
      }
      if (struct.isSetFilterJson()) {
        oprot.writeString(struct.filterJson);
      }
      if (struct.isSetHighlighting()) {
        struct.highlighting.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Query struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.searchString = iprot.readString();
      struct.setSearchStringIsSet(true);
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.type = iprot.readString();
        struct.setTypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.page = new Page();
        struct.page.read(iprot);
        struct.setPageIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list75 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.sortCriteria = new ArrayList<SortCriteria>(_list75.size);
          for (int _i76 = 0; _i76 < _list75.size; ++_i76)
          {
            SortCriteria _elem77;
            _elem77 = new SortCriteria();
            _elem77.read(iprot);
            struct.sortCriteria.add(_elem77);
          }
        }
        struct.setSortCriteriaIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list78 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.facets = new ArrayList<ezbake.data.elastic.thrift.Facet>(_list78.size);
          for (int _i79 = 0; _i79 < _list78.size; ++_i79)
          {
            ezbake.data.elastic.thrift.Facet _elem80;
            _elem80 = new ezbake.data.elastic.thrift.Facet();
            _elem80.read(iprot);
            struct.facets.add(_elem80);
          }
        }
        struct.setFacetsIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TSet _set81 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.returnedFields = new HashSet<String>(2*_set81.size);
          for (int _i82 = 0; _i82 < _set81.size; ++_i82)
          {
            String _elem83;
            _elem83 = iprot.readString();
            struct.returnedFields.add(_elem83);
          }
        }
        struct.setReturnedFieldsIsSet(true);
      }
      if (incoming.get(5)) {
        struct.filterJson = iprot.readString();
        struct.setFilterJsonIsSet(true);
      }
      if (incoming.get(6)) {
        struct.highlighting = new HighlightRequest();
        struct.highlighting.read(iprot);
        struct.setHighlightingIsSet(true);
      }
    }
  }

}

