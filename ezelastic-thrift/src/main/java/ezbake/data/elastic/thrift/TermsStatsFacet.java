/*   Copyright (C) 2013-2014 Computer Sciences Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. */

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ezbake.data.elastic.thrift;

import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TermsStatsFacet implements org.apache.thrift.TBase<TermsStatsFacet, TermsStatsFacet._Fields>, java.io.Serializable, Cloneable, Comparable<TermsStatsFacet> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TermsStatsFacet");

  private static final org.apache.thrift.protocol.TField KEY_FIELD_FIELD_DESC = new org.apache.thrift.protocol.TField("keyField", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField VALUE_FIELD_FIELD_DESC = new org.apache.thrift.protocol.TField("valueField", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("order", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("size", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField ALL_TERMS_FIELD_DESC = new org.apache.thrift.protocol.TField("allTerms", org.apache.thrift.protocol.TType.BOOL, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TermsStatsFacetStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TermsStatsFacetTupleSchemeFactory());
  }

  public String keyField; // required
  public TermsStatsValue valueField; // required
  /**
   * 
   * @see TermStatOrder
   */
  public TermStatOrder order; // required
  public int size; // required
  public boolean allTerms; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    KEY_FIELD((short)1, "keyField"),
    VALUE_FIELD((short)2, "valueField"),
    /**
     * 
     * @see TermStatOrder
     */
    ORDER((short)3, "order"),
    SIZE((short)4, "size"),
    ALL_TERMS((short)5, "allTerms");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // KEY_FIELD
          return KEY_FIELD;
        case 2: // VALUE_FIELD
          return VALUE_FIELD;
        case 3: // ORDER
          return ORDER;
        case 4: // SIZE
          return SIZE;
        case 5: // ALL_TERMS
          return ALL_TERMS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SIZE_ISSET_ID = 0;
  private static final int __ALLTERMS_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.KEY_FIELD, new org.apache.thrift.meta_data.FieldMetaData("keyField", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VALUE_FIELD, new org.apache.thrift.meta_data.FieldMetaData("valueField", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TermsStatsValue.class)));
    tmpMap.put(_Fields.ORDER, new org.apache.thrift.meta_data.FieldMetaData("order", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TermStatOrder.class)));
    tmpMap.put(_Fields.SIZE, new org.apache.thrift.meta_data.FieldMetaData("size", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ALL_TERMS, new org.apache.thrift.meta_data.FieldMetaData("allTerms", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TermsStatsFacet.class, metaDataMap);
  }

  public TermsStatsFacet() {
  }

  public TermsStatsFacet(
    String keyField,
    TermsStatsValue valueField,
    TermStatOrder order,
    int size,
    boolean allTerms)
  {
    this();
    this.keyField = keyField;
    this.valueField = valueField;
    this.order = order;
    this.size = size;
    setSizeIsSet(true);
    this.allTerms = allTerms;
    setAllTermsIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TermsStatsFacet(TermsStatsFacet other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetKeyField()) {
      this.keyField = other.keyField;
    }
    if (other.isSetValueField()) {
      this.valueField = new TermsStatsValue(other.valueField);
    }
    if (other.isSetOrder()) {
      this.order = other.order;
    }
    this.size = other.size;
    this.allTerms = other.allTerms;
  }

  public TermsStatsFacet deepCopy() {
    return new TermsStatsFacet(this);
  }

  @Override
  public void clear() {
    this.keyField = null;
    this.valueField = null;
    this.order = null;
    setSizeIsSet(false);
    this.size = 0;
    setAllTermsIsSet(false);
    this.allTerms = false;
  }

  public String getKeyField() {
    return this.keyField;
  }

  public TermsStatsFacet setKeyField(String keyField) {
    this.keyField = keyField;
    return this;
  }

  public void unsetKeyField() {
    this.keyField = null;
  }

  /** Returns true if field keyField is set (has been assigned a value) and false otherwise */
  public boolean isSetKeyField() {
    return this.keyField != null;
  }

  public void setKeyFieldIsSet(boolean value) {
    if (!value) {
      this.keyField = null;
    }
  }

  public TermsStatsValue getValueField() {
    return this.valueField;
  }

  public TermsStatsFacet setValueField(TermsStatsValue valueField) {
    this.valueField = valueField;
    return this;
  }

  public void unsetValueField() {
    this.valueField = null;
  }

  /** Returns true if field valueField is set (has been assigned a value) and false otherwise */
  public boolean isSetValueField() {
    return this.valueField != null;
  }

  public void setValueFieldIsSet(boolean value) {
    if (!value) {
      this.valueField = null;
    }
  }

  /**
   * 
   * @see TermStatOrder
   */
  public TermStatOrder getOrder() {
    return this.order;
  }

  /**
   * 
   * @see TermStatOrder
   */
  public TermsStatsFacet setOrder(TermStatOrder order) {
    this.order = order;
    return this;
  }

  public void unsetOrder() {
    this.order = null;
  }

  /** Returns true if field order is set (has been assigned a value) and false otherwise */
  public boolean isSetOrder() {
    return this.order != null;
  }

  public void setOrderIsSet(boolean value) {
    if (!value) {
      this.order = null;
    }
  }

  public int getSize() {
    return this.size;
  }

  public TermsStatsFacet setSize(int size) {
    this.size = size;
    setSizeIsSet(true);
    return this;
  }

  public void unsetSize() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SIZE_ISSET_ID);
  }

  /** Returns true if field size is set (has been assigned a value) and false otherwise */
  public boolean isSetSize() {
    return EncodingUtils.testBit(__isset_bitfield, __SIZE_ISSET_ID);
  }

  public void setSizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SIZE_ISSET_ID, value);
  }

  public boolean isAllTerms() {
    return this.allTerms;
  }

  public TermsStatsFacet setAllTerms(boolean allTerms) {
    this.allTerms = allTerms;
    setAllTermsIsSet(true);
    return this;
  }

  public void unsetAllTerms() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ALLTERMS_ISSET_ID);
  }

  /** Returns true if field allTerms is set (has been assigned a value) and false otherwise */
  public boolean isSetAllTerms() {
    return EncodingUtils.testBit(__isset_bitfield, __ALLTERMS_ISSET_ID);
  }

  public void setAllTermsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ALLTERMS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case KEY_FIELD:
      if (value == null) {
        unsetKeyField();
      } else {
        setKeyField((String)value);
      }
      break;

    case VALUE_FIELD:
      if (value == null) {
        unsetValueField();
      } else {
        setValueField((TermsStatsValue)value);
      }
      break;

    case ORDER:
      if (value == null) {
        unsetOrder();
      } else {
        setOrder((TermStatOrder)value);
      }
      break;

    case SIZE:
      if (value == null) {
        unsetSize();
      } else {
        setSize((Integer)value);
      }
      break;

    case ALL_TERMS:
      if (value == null) {
        unsetAllTerms();
      } else {
        setAllTerms((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case KEY_FIELD:
      return getKeyField();

    case VALUE_FIELD:
      return getValueField();

    case ORDER:
      return getOrder();

    case SIZE:
      return Integer.valueOf(getSize());

    case ALL_TERMS:
      return Boolean.valueOf(isAllTerms());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case KEY_FIELD:
      return isSetKeyField();
    case VALUE_FIELD:
      return isSetValueField();
    case ORDER:
      return isSetOrder();
    case SIZE:
      return isSetSize();
    case ALL_TERMS:
      return isSetAllTerms();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TermsStatsFacet)
      return this.equals((TermsStatsFacet)that);
    return false;
  }

  public boolean equals(TermsStatsFacet that) {
    if (that == null)
      return false;

    boolean this_present_keyField = true && this.isSetKeyField();
    boolean that_present_keyField = true && that.isSetKeyField();
    if (this_present_keyField || that_present_keyField) {
      if (!(this_present_keyField && that_present_keyField))
        return false;
      if (!this.keyField.equals(that.keyField))
        return false;
    }

    boolean this_present_valueField = true && this.isSetValueField();
    boolean that_present_valueField = true && that.isSetValueField();
    if (this_present_valueField || that_present_valueField) {
      if (!(this_present_valueField && that_present_valueField))
        return false;
      if (!this.valueField.equals(that.valueField))
        return false;
    }

    boolean this_present_order = true && this.isSetOrder();
    boolean that_present_order = true && that.isSetOrder();
    if (this_present_order || that_present_order) {
      if (!(this_present_order && that_present_order))
        return false;
      if (!this.order.equals(that.order))
        return false;
    }

    boolean this_present_size = true;
    boolean that_present_size = true;
    if (this_present_size || that_present_size) {
      if (!(this_present_size && that_present_size))
        return false;
      if (this.size != that.size)
        return false;
    }

    boolean this_present_allTerms = true;
    boolean that_present_allTerms = true;
    if (this_present_allTerms || that_present_allTerms) {
      if (!(this_present_allTerms && that_present_allTerms))
        return false;
      if (this.allTerms != that.allTerms)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_keyField = true && (isSetKeyField());
    builder.append(present_keyField);
    if (present_keyField)
      builder.append(keyField);

    boolean present_valueField = true && (isSetValueField());
    builder.append(present_valueField);
    if (present_valueField)
      builder.append(valueField);

    boolean present_order = true && (isSetOrder());
    builder.append(present_order);
    if (present_order)
      builder.append(order.getValue());

    boolean present_size = true;
    builder.append(present_size);
    if (present_size)
      builder.append(size);

    boolean present_allTerms = true;
    builder.append(present_allTerms);
    if (present_allTerms)
      builder.append(allTerms);

    return builder.toHashCode();
  }

  @Override
  public int compareTo(TermsStatsFacet other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetKeyField()).compareTo(other.isSetKeyField());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKeyField()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keyField, other.keyField);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetValueField()).compareTo(other.isSetValueField());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValueField()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.valueField, other.valueField);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrder()).compareTo(other.isSetOrder());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrder()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.order, other.order);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSize()).compareTo(other.isSetSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.size, other.size);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAllTerms()).compareTo(other.isSetAllTerms());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAllTerms()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.allTerms, other.allTerms);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TermsStatsFacet(");
    boolean first = true;

    sb.append("keyField:");
    if (this.keyField == null) {
      sb.append("null");
    } else {
      sb.append(this.keyField);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("valueField:");
    if (this.valueField == null) {
      sb.append("null");
    } else {
      sb.append(this.valueField);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("order:");
    if (this.order == null) {
      sb.append("null");
    } else {
      sb.append(this.order);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("size:");
    sb.append(this.size);
    first = false;
    if (!first) sb.append(", ");
    sb.append("allTerms:");
    sb.append(this.allTerms);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TermsStatsFacetStandardSchemeFactory implements SchemeFactory {
    public TermsStatsFacetStandardScheme getScheme() {
      return new TermsStatsFacetStandardScheme();
    }
  }

  private static class TermsStatsFacetStandardScheme extends StandardScheme<TermsStatsFacet> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TermsStatsFacet struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // KEY_FIELD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.keyField = iprot.readString();
              struct.setKeyFieldIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // VALUE_FIELD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.valueField = new TermsStatsValue();
              struct.valueField.read(iprot);
              struct.setValueFieldIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ORDER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.order = TermStatOrder.findByValue(iprot.readI32());
              struct.setOrderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.size = iprot.readI32();
              struct.setSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ALL_TERMS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.allTerms = iprot.readBool();
              struct.setAllTermsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TermsStatsFacet struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.keyField != null) {
        oprot.writeFieldBegin(KEY_FIELD_FIELD_DESC);
        oprot.writeString(struct.keyField);
        oprot.writeFieldEnd();
      }
      if (struct.valueField != null) {
        oprot.writeFieldBegin(VALUE_FIELD_FIELD_DESC);
        struct.valueField.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.order != null) {
        oprot.writeFieldBegin(ORDER_FIELD_DESC);
        oprot.writeI32(struct.order.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SIZE_FIELD_DESC);
      oprot.writeI32(struct.size);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ALL_TERMS_FIELD_DESC);
      oprot.writeBool(struct.allTerms);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TermsStatsFacetTupleSchemeFactory implements SchemeFactory {
    public TermsStatsFacetTupleScheme getScheme() {
      return new TermsStatsFacetTupleScheme();
    }
  }

  private static class TermsStatsFacetTupleScheme extends TupleScheme<TermsStatsFacet> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TermsStatsFacet struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetKeyField()) {
        optionals.set(0);
      }
      if (struct.isSetValueField()) {
        optionals.set(1);
      }
      if (struct.isSetOrder()) {
        optionals.set(2);
      }
      if (struct.isSetSize()) {
        optionals.set(3);
      }
      if (struct.isSetAllTerms()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetKeyField()) {
        oprot.writeString(struct.keyField);
      }
      if (struct.isSetValueField()) {
        struct.valueField.write(oprot);
      }
      if (struct.isSetOrder()) {
        oprot.writeI32(struct.order.getValue());
      }
      if (struct.isSetSize()) {
        oprot.writeI32(struct.size);
      }
      if (struct.isSetAllTerms()) {
        oprot.writeBool(struct.allTerms);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TermsStatsFacet struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.keyField = iprot.readString();
        struct.setKeyFieldIsSet(true);
      }
      if (incoming.get(1)) {
        struct.valueField = new TermsStatsValue();
        struct.valueField.read(iprot);
        struct.setValueFieldIsSet(true);
      }
      if (incoming.get(2)) {
        struct.order = TermStatOrder.findByValue(iprot.readI32());
        struct.setOrderIsSet(true);
      }
      if (incoming.get(3)) {
        struct.size = iprot.readI32();
        struct.setSizeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.allTerms = iprot.readBool();
        struct.setAllTermsIsSet(true);
      }
    }
  }

}

